#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
#include <math.h>
#include "SensorFusion.h"

#define DECLINATION 4.25 // Declination (degrees) in Copenhagen, Denmark

SF fusion;
float deltat;
float rollQ, pitchQ, yawQ;

// global constants for 9 DoF fusion and AHRS (Attitude and Heading Reference System)
float GyroMeasError = PI * (40.0f / 180.0f);   // gyroscope measurement error in rads/s (start at 40 deg/s)
float GyroMeasDrift = PI * (0.0f  / 180.0f);   // gyroscope measurement drift in rad/s/s (start at 0.0 deg/s/s)

 
#define BNO055_SAMPLERATE_DELAY_MS (100)
 
Adafruit_BNO055 myIMU = Adafruit_BNO055();
 
void setup() {
  // put your setup code here, to run once:
Serial.begin(115200);
myIMU.begin();
delay(1000);
int8_t temp=myIMU.getTemp();
myIMU.setExtCrystalUse(true);
}
 
void loop() {
  // put your main code here, to run repeatedly:
uint8_t system, gyro, accel, mg = 0;
myIMU.getCalibration(&system, &gyro, &accel, &mg);
imu::Vector<3> accR =myIMU.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
imu::Vector<3> gyroR =myIMU.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
imu::Vector<3> magR =myIMU.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);

float accx = accR.x();
float accy = accR.y();
float accz = accR.z();
float gyrox = gyroR.x()* DEG_TO_RAD;
float gyroy = gyroR.y()* DEG_TO_RAD;
float gyroz = gyroR.z()* DEG_TO_RAD;
float magx = magR.x();
float magy = magR.y();
float magz = magR.z();

deltat = fusion.deltatUpdate();
  //fusion.MahonyUpdate(gyrox, gyroy, gyroz, accx, accy, accz, magx, magy, magz, deltat);
fusion.MadgwickUpdate(gyrox, gyroy, gyroz, accx, accy, accz, magx, magy, magz, deltat);  

pitchQ = fusion.getPitch();
rollQ = fusion.getRoll();    //could also use getRollRadians() ecc
yawQ = fusion.getYaw()-4.25f;

 // MadgwickQuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  mx,  my,  mz);
//  MahonyQuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f, mx, my, mz);
 
//Serial.print(accR.x()/9.8);Serial.print(",");Serial.print(accR.y()/9.8);Serial.print(",");Serial.print(accR.z()/9.8);
//Serial.print(",");

//Serial.print(gyroR.x());Serial.print(",");Serial.print(gyroR.y());Serial.print(",");Serial.print(gyroR.z());
//Serial.print(",");

//Serial.print(magR.x());Serial.print(",");Serial.print(magR.y());Serial.print(",");Serial.print(magR.z());
//Serial.print(", Calib:, ");


Serial.print(pitchQ);
Serial.print(",");
Serial.print(rollQ);
Serial.print(",");
Serial.print(yawQ);
Serial.print(",");
Serial.print(accel);Serial.print(",");Serial.print(gyro);Serial.print(",");Serial.print(mg);Serial.print(",");Serial.println(system);


 
delay(BNO055_SAMPLERATE_DELAY_MS);
}
